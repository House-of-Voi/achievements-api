/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get achievements (list or single)
         * @description If `id` is provided, returns a single achievement (including hidden). Otherwise returns a list. In list mode, hidden achievements are only returned if the caller owns them (provide `account`). When `account` is supplied, response objects also include `owned` and `eligible` flags.
         */
        get: operations["listAchievements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim achievements (single or all) for an account
         * @description Claims a single achievement when `id` is provided in the body; otherwise claims all eligible achievements. If the specified `id` does not exist, the response is 200 with an `errors` entry { reason: "Not found" }.
         */
        post: operations["claimAchievements"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AchievementMetadata: {
            /** @example wager-warrior-100k */
            id: string;
            /** @example Wager Warrior - 100K */
            name: string;
            /** @example Reach a total wagered amount of 100K USD equivalent. */
            description: string;
            /** Format: uri */
            imageUrl?: string | null;
            display?: {
                /** @enum {string} */
                category?: "wagering" | "wins" | "losses" | "loyalty" | "lp" | "community" | "game";
                /** @example Wager Warrior */
                series?: string;
                /** @example wager_warrior */
                seriesKey?: string;
                /** @example 1 */
                tier?: number;
                /** @example 6 */
                tiersTotal?: number;
                /** @example 1 */
                order?: number;
                /** @example [
                 *       "milestone",
                 *       "volume"
                 *     ] */
                tags?: string[];
                scope?: {
                    /**
                     * @example global
                     * @enum {string}
                     */
                    kind?: "global" | "game";
                    /** @example xplosion */
                    gameKey?: string | null;
                    /** @example Xplosion Slots */
                    gameName?: string | null;
                } | null;
            } | null;
            /** @description Present when the `account` query param is supplied. `true` if that account owns this achievement. */
            owned?: boolean;
            /** @description Present when the `account` query param is supplied. `true` if that account currently meets the requirement to mint this achievement. */
            eligible?: boolean;
        };
        ClaimRequest: {
            /** @description Voi address */
            account: string;
            /** @description Optional achievement id. If provided, only this achievement will be attempted. */
            id?: string;
            /**
             * @description If true, only perform eligibility checks and log; do not mint.
             * @default false
             */
            dryRun: boolean;
        };
        ClaimResult: {
            minted: {
                /** @example wager-warrior-100k */
                id: string;
                /** @example SOMEVOITXID... */
                txnId: string;
            }[];
            errors: {
                id: string;
                /** @example Already minted */
                reason: string;
            }[];
        };
        Error: {
            /** @example Invalid account */
            error: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listAchievements: {
        parameters: {
            query?: {
                /** @description Exact achievement id. If present, the response body is a single object (hidden allowed). */
                id?: string;
                account?: string;
                category?: "wagering" | "wins" | "losses" | "loyalty" | "lp" | "community" | "game";
                seriesKey?: string;
                game?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Single achievement (when id is provided) or an array of achievements */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementMetadata"] | components["schemas"]["AchievementMetadata"][];
                };
            };
            /** @description Invalid account */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Achievement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    claimAchievements: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClaimRequest"];
            };
        };
        responses: {
            /** @description Mint results per achievement */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClaimResult"];
                };
            };
            /** @description Invalid account */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
