{
  "openapi": "3.1.0",
  "info": {
    "title": "Achievements API",
    "version": "1.0.1",
    "description": "Endpoints to list and claim on-chain achievements."
  },
  "servers": [
    { "url": "https://achievements.houseofvoi.com", "description": "Prod" },
    { "url": "http://localhost:3000", "description": "Local" }
  ],
  "tags": [{ "name": "achievements" }],
  "paths": {
    "/api/achievements": {
      "get": {
        "operationId": "listAchievements",
        "tags": ["achievements"],
        "summary": "Get achievements (list or single)",
        "description": "If `id` is provided, returns a single achievement (including hidden). Otherwise returns a list. In list mode, hidden achievements are only returned if the caller owns them (provide `account`).",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": { "type": "string" },
            "description": "Exact achievement id. If present, the response body is a single object (hidden allowed)."
          },
          {
            "name": "account",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "description": "Voi address to include hidden if owned (list mode)" }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["wagering","wins","losses","loyalty","lp","community","game"]
            }
          },
          {
            "name": "seriesKey",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "game",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "description": "gameKey for game-scoped achievements" }
          }
        ],
        "responses": {
          "200": {
            "description": "Single achievement (when id is provided) or an array of achievements",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/AchievementMetadata" },
                    { "type": "array", "items": { "$ref": "#/components/schemas/AchievementMetadata" } }
                  ]
                },
                "examples": {
                  "single": {
                    "summary": "Single",
                    "value": {
                      "id": "wager-warrior-100k",
                      "name": "Wager Warrior - 100K",
                      "description": "Reach a total wagered amount of 100K USD equivalent."
                    }
                  },
                  "list": {
                    "summary": "List",
                    "value": [
                      {
                        "id": "wager-warrior-100k",
                        "name": "Wager Warrior - 100K",
                        "description": "Reach a total wagered amount of 100K USD equivalent."
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid account",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": {
            "description": "Achievement not found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/api/claim": {
      "post": {
        "operationId": "claimAchievements",
        "tags": ["achievements"],
        "summary": "Claim all eligible achievements for an account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ClaimRequest" },
              "examples": {
                "basic": {
                  "summary": "Claim for an account",
                  "value": { "account": "HEDLDFCAXTD4KSNZ3JSF5PCGZEAK4NPFFL6XFEAUWXSZZYDHOVDXCOHS7I" }
                },
                "dryRun": {
                  "summary": "Validate & log only",
                  "value": {
                    "account": "HEDLDFCAXTD4KSNZ3JSF5PCGZEAK4NPFFL6XFEAUWXSZZYDHOVDXCOHS7I",
                    "dryRun": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mint results per achievement",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ClaimResult" } } }
          },
          "400": {
            "description": "Invalid account",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AchievementMetadata": {
        "type": "object",
        "required": ["id","name","description"],
        "properties": {
          "id": { "type": "string", "example": "wager-warrior-100k" },
          "name": { "type": "string", "example": "Wager Warrior - 100K" },
          "description": { "type": "string", "example": "Reach a total wagered amount of 100K USD equivalent." },
          "imageUrl": { "type": "string", "format": "uri", "nullable": true },
          "display": {
            "type": "object",
            "nullable": true,
            "properties": {
              "category": {
                "type": "string",
                "enum": ["wagering","wins","losses","loyalty","lp","community","game"]
              },
              "series": { "type": "string", "example": "Wager Warrior" },
              "seriesKey": { "type": "string", "example": "wager_warrior" },
              "tier": { "type": "integer", "minimum": 1, "example": 1 },
              "tiersTotal": { "type": "integer", "minimum": 1, "example": 6 },
              "order": { "type": "integer", "example": 1 },
              "tags": { "type": "array", "items": { "type": "string" }, "example": ["milestone","volume"] },
              "scope": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "kind": { "type": "string", "enum": ["global","game"], "example": "global" },
                  "gameKey": { "type": "string", "nullable": true, "example": "xplosion" },
                  "gameName": { "type": "string", "nullable": true, "example": "Xplosion Slots" }
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      "ClaimRequest": {
        "type": "object",
        "required": ["account"],
        "properties": {
          "account": { "type": "string", "description": "Voi address" },
          "dryRun": {
            "type": "boolean",
            "description": "If true, only perform eligibility checks and log; do not mint.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ClaimResult": {
        "type": "object",
        "required": ["minted","errors"],
        "properties": {
          "minted": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id","txnId"],
              "properties": {
                "id": { "type": "string", "example": "wager-warrior-100k" },
                "txnId": { "type": "string", "example": "SOMEVOITXID..." }
              },
              "additionalProperties": false
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id","reason"],
              "properties": {
                "id": { "type": "string" },
                "reason": { "type": "string", "example": "Already minted" }
              },
              "additionalProperties": false
            }
          }
        },
        "additionalProperties": false
      },
      "Error": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": { "type": "string", "example": "Invalid account" }
        },
        "additionalProperties": false
      }
    }
  }
}
